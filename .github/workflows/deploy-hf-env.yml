name: Deploy to Hugging Face Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (leave empty for all)'
        required: false
        type: choice
        default: 'all'
        options:
          - 'all'
          - 'echo_env'
          - 'coding_env'
          - 'chat_env'
          - 'atari_env'
          - 'openspiel_env'
      custom_environment:
        description: 'Custom environment to deploy (leave empty for none)'
        required: false
        type: string
        default: ''
      base_image_sha:
        description: 'SHA for openenv-base image (leave empty for latest)'
        required: false
        type: string
        default: ''
      hf_namespace:
        description: 'Hugging Face namespace to deploy to (leave empty for openenv)'
        required: false
        type: string
        default: 'openenv'
      private:
        description: 'Deploy the space as private (default: public)'
        required: false
        type: boolean
        default: false
      space_suffix:
        description: 'Suffix to add to space name (e.g., "-test" for test spaces)'
        required: false
        type: string
        default: ''

jobs:
  # Job to determine which environments to deploy
  determine-environments:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.changes.outputs.environments }}
      deploy_all: ${{ steps.changes.outputs.deploy_all }}
      use_matrix: ${{ steps.changes.outputs.use_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          # Handle manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.environment }}" = "all" ]; then
              echo "deploy_all=true" >> $GITHUB_OUTPUT
              echo "use_matrix=true" >> $GITHUB_OUTPUT
              echo "environments=echo_env,coding_env,chat_env,atari_env,openspiel_env" >> $GITHUB_OUTPUT
              echo "Manual trigger - deploying all environments with matrix"
            else
              echo "deploy_all=false" >> $GITHUB_OUTPUT
              echo "use_matrix=false" >> $GITHUB_OUTPUT
              echo "environments=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
              echo "Manual trigger - deploying ${{ github.event.inputs.environment }} environment"
            fi
            exit 0
          fi
          
          # Check if core files changed (deploy all environments)
          if git diff --name-only HEAD~1 HEAD | grep -E '^src/core/' > /dev/null; then
            echo "deploy_all=true" >> $GITHUB_OUTPUT
            echo "use_matrix=true" >> $GITHUB_OUTPUT
            echo "environments=echo_env,coding_env,chat_env,atari_env,openspiel_env" >> $GITHUB_OUTPUT
            echo "Core files changed - deploying all environments with matrix"
            exit 0
          fi
          
          # Check which specific environments changed
          changed_envs=()
          for env in echo_env coding_env chat_env atari_env openspiel_env; do
            if git diff --name-only HEAD~1 HEAD | grep -E "^src/envs/$env/" > /dev/null; then
              changed_envs+=("$env")
            fi
          done
          
          if [ ${#changed_envs[@]} -eq 0 ]; then
            echo "deploy_all=false" >> $GITHUB_OUTPUT
            echo "use_matrix=false" >> $GITHUB_OUTPUT
            echo "environments=" >> $GITHUB_OUTPUT
            echo "No environment changes detected"
          else
            echo "deploy_all=false" >> $GITHUB_OUTPUT
            echo "use_matrix=false" >> $GITHUB_OUTPUT
            echo "environments=$(IFS=,; echo "${changed_envs[*]}")" >> $GITHUB_OUTPUT
            echo "Changed environments: ${changed_envs[*]}"
          fi

  # Job to deploy environments (matrix for all environments)
  deploy-matrix:
    needs: determine-environments
    if: needs.determine-environments.outputs.use_matrix == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [echo_env, coding_env, chat_env, atari_env, openspiel_env]
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Hugging Face CLI
        run: |
          curl -LsSf https://hf.co/cli/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Deploy to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_NAMESPACE: ${{ github.event.inputs.hf_namespace }}
          HF_USERNAME: ${{ github.event.inputs.hf_namespace }}
        run: |
          chmod +x scripts/deploy_to_hf.sh
          if [ -n "${{ github.event.inputs.base_image_sha }}" ]; then
            ./scripts/deploy_to_hf.sh --env "${{ matrix.environment }}" --base-sha "${{ github.event.inputs.base_image_sha }}"
          else
            ./scripts/deploy_to_hf.sh --env "${{ matrix.environment }}"
          fi

  # Job to deploy single environment
  deploy-single:
    needs: determine-environments
    if: needs.determine-environments.outputs.use_matrix == 'false' && needs.determine-environments.outputs.environments != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJSON(format('["{0}"]', needs.determine-environments.outputs.environments)) }}
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Hugging Face CLI
        run: |
          curl -LsSf https://hf.co/cli/install.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Deploy to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_NAMESPACE: ${{ github.event.inputs.hf_namespace }}
          HF_USERNAME: ${{ github.event.inputs.hf_namespace }}
        run: |
          chmod +x scripts/deploy_to_hf.sh
          if [ -n "${{ github.event.inputs.base_image_sha }}" ]; then
            ./scripts/deploy_to_hf.sh --env "${{ matrix.environment }}" --base-sha "${{ github.event.inputs.base_image_sha }}"
          else
            ./scripts/deploy_to_hf.sh --env "${{ matrix.environment }}"
          fi
